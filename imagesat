#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Imagesat: Daemon can download satellite images
Copyright (C) 2013 Julien Freyermuth
All Rights Reserved
This file is part of Imagesat.

See the file LICENSE for copying permission.
"""


import sys
import os
import time
import Image
import yaml
import requests
import urllib
import io

from Imagesat.mylog import logging
from Imagesat.img_info import Img_info
from Imagesat.download import download


######
# Beginning of main script
############

list_picture = []
error_file   = "/var/log/imagesat/error.log"
conf_file    = "/etc/imagesat/imagesat.conf"

# Checking if have writting rights on error_file
(path, f) = os.path.split(error_file)
if not os.access(path, os.W_OK):
    print("You don't have the right permissions on " + error_file
                    + " !", file=sys.stderr)
    sys.exit(2)

# Check if config file exist and check if have reading rights on this file
if not os.path.isfile(conf_file):
    logging.warning("The \"" + conf_file + "\" don't exist !")
    sys.exit(2)
if not os.access(conf_file, os.R_OK):
    logging.warning("You don't have the right permissions to read \""
                    + conf_file + "\" !")
    sys.exit(2)

# Read config file
data = str()
try:
    file_yaml = open(conf_file, 'r')
    data = yaml.load(file_yaml.read())
    file_yaml.close()
except yaml.parser.ParserError as e:
    print(e)
    sys.exit(2)

# Store data
try:
    for pic_name in data:
        picture = Img_info()
        for info in data[pic_name]:
            for key, val in info.items():
                if key == 'url':
                    picture.url = val
                elif key == 'path_sav':
                    picture.path = val
                elif key == 'update':
                    picture.time = val
                elif key == 'crop':
                    picture.crop = val
                elif key == 'resize':
                    picture.resize = val
                elif key == 'search':
                    picture.search = val
                elif key == 'base_url':
                    picture.base = val
                else:
                    logging.warning("In config file, \"" + key
                                    + "\" is unknown !")
        list_picture.append(picture)
except AttributeError as e:
    logging.error("There is a big mistake in config file. See the example !")
    sys.exit(1)

# Check if number of data is different of 0
if len(list_picture) == 0:
    logging.critical("The file \"" + conf_file + "\" is empty !")
    sys.exit(2)

# Find short time to sleep
t = []
for pic in list_picture:
    t.append(pic.time)
time2sleep = min(t)
del(t)


# Beginning of while loop
while 1:
    # Treat infos of every picture
    copy_time2sleep = time2sleep
    for i, pic in enumerate(list_picture):
        must_download = False
        now = time.time()

        # Check if picture exist
        if os.path.isfile(pic.path):
            # Check writting access
            if not os.access(pic.path, os.W_OK):
                logging.warning("You don't have write permissions on \""
                                + pic.path + "\" !")
                del list_picture[i]
                if len(list_picture) == 0:
                    logging.error("There is no picture in the list  \
                                  since there is a mistake in the config  \
                                  file, so I'll stop !")
                    sys.exit(2)
                else:
                    copy_time2sleep(0.1)
                    continue

            time_image = os.stat(pic.path)[8]

            if time_image + pic.time <= now:
                must_download = True

        # If picture not exist, download it
        else:
            must_download = True

        if must_download:
            if pic.search:
                # Download page where picture's informations are
                page = download(pic.url)

                if page.status_code != requests.codes.ok:
                    logging.warning(pic.url + " isn't a valid url ! Error  \
                                    code : " + str(page.status_code))
                    del list_picture[i]
                    if len(list_picture) == 0:
                        logging.error("There is no picture in the list  \
                                      since there is a mistake in the  \
                                      config file, so I'll stop !")
                        sys.exit(2)
                    else:
                        copy_time2sleep = 0.1
                        continue

                for word in page.content.decode('utf-8', 'ignore').split(" "):
                    if pic.search in word:
                        pic.url = word.split('=')[1][1:-1]
                        if pic.base:
                            pic.url = urllib.parse.urljoin(pic.base, pic.url)

            # Download picture
            req = download(pic.url)

            if req.status_code != requests.codes.ok:
                logging.warning(pic.url + " isn't a valid url ! Error code : "
                                + str(page.status_code))
                del list_picture[i]
                if len(list_picture) == 0:
                    logging.error("There is no picture in the list since  \
                                  there is a mistake in the config file, so  \
                                  I'll stop !")
                    sys.exit(2)
                else:
                    copy_time2sleep = 0.1
                    continue

            # crop / resize picture
            if pic.crop or pic.resize:
                # Put picture in RAM
                image_src = Image.open(io.BytesIO(req.content))
                if pic.crop:
                    image_src = image_src.crop(pic.crop)
                if pic.resize:
                    image_src = image_src.resize((pic.resize), Image.ANTIALIAS)

                # Save picture to path
                image_src.save(pic.path)

            else:
                with open(pic.path, 'wb') as e:
                    e.write(req.content)

        else:
            # Calculate time before the next update
            time_remaining = time_image + pic.time - now

            if time_remaining < copy_time2sleep:
                copy_time2sleep = time_remaining

    # Intelligent loop to take hibernate and suspend
    loop = True
    while loop:
        # Get time
        time_tmp = time.time()
        # If oversleep, exit the loop
        if now + copy_time2sleep < time_tmp:
            loop = False

        # Otherwise fall asleep and wake up regulary
        else:
            # Calculate remaining time to sleep
            rest = (now + copy_time2sleep) - time_tmp
            # If less than 2s no need to sleep
            if rest < 2:
                loop = False
            # If less than 120s, sleep the rest of time
            elif rest < 120:
                time.sleep(rest)
            # otherwise, sleep during 120s
            else:
                time.sleep(120)
